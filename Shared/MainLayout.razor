@inherits LayoutComponentBase
@using Microsoft.AspNetCore.SignalR.Client

@implements IAsyncDisposable

<PageTitle>Kanoe</PageTitle>

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="_Theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <CascadingValue Value="@_isDarkMode" Name="IsDarkMode">
        <MudAppBar>
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Tertiary" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            Kanoe
            <MudSpacer />
            <MudToggleIconButton @bind-Toggled="@_isDarkMode"
                                 Icon="@Icons.Material.Filled.DarkMode" Color="Color.Inherit" Title="Dark mode"
                                 ToggledIcon="@Icons.Material.Filled.LightMode" ToggledColor="Color.Inherit" ToggledTitle="Light mode" />
        </MudAppBar>
        <MudDrawer @bind-Open="@_drawerOpen">
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            <MudContainer Class="px-5 pt-5">
                @Body
            </MudContainer>
        </MudMainContent>
    </CascadingValue>
</MudLayout>

@code {
    [Inject]
    public required NavigationManager Navigation { get; set; }
    [Inject]
    public required ISnackbar SnackbarService { get; set; }


    bool _drawerOpen = true;
    private bool _isDarkMode;
    private MudThemeProvider? _mudThemeProvider;

    private HubConnection? hubConnection;

    MudTheme _Theme = new MudTheme()
        {
            Typography = new Typography()
            {
                Default = new Default()
                {
                    FontFamily = new[] { "K2D", "Play", "Roboto", "Helvetica", "Arial", "sans-serif" }
                }
            }
        };

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/notificationshub"))
        .Build();

        hubConnection.On<string, Severity>("Notify", Notify);

        await hubConnection.StartAsync();
    }

    void Notify(string text, Severity severity)
    {
        SnackbarService.Add(text, severity);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider != null)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
