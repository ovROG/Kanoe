@page "/config/general"
@using Kanoe.Data.Models
@using Microsoft.AspNetCore.WebUtilities

<div class="d-flex flex-column gap-5">
    <MudText Typo="Typo.h4">Twitch:</MudText>
    <div class="d-flex align-center gap-10">
        <MudText>Auth Status:</MudText>
        @if (ConfigService.GetTwitchToken() != null) //TODO: proper check
        {
            <MudChip Color="Color.Success" Size="Size.Small">Active</MudChip>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="TwitchAuth" Class="ml-auto" StartIcon="@Icons.Material.Filled.Cached">ReAuth</MudButton>
        }
        else
        {
            <MudChip Color="Color.Error" Size="Size.Small">Required</MudChip>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="TwitchAuth" Class="ml-auto" StartIcon="@Icons.Material.Filled.Error">Auth</MudButton>
        }
    </div>
    <div class="d-flex align-center gap-10">
        <MudText>Command Prefix:</MudText>
        <MudTextField @bind-Value="TwitchPrefix" Label="Prefix" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SavePrefix" Class="ml-auto" StartIcon="@Icons.Material.Filled.Save">Update</MudButton>
    </div>
</div>


@code {
    [Inject]
    public required Services.Config ConfigService { get; set; }
    [Inject]
    public required IConfiguration _config { get; set; }
    [Inject]
    public required NavigationManager Navigation { get; set; }

    public char? TwitchPrefix { get; set; } 

    protected override void OnInitialized()
    {
        TwitchPrefix = ConfigService.GetTwitchChatPrefix();
    }

    private void TwitchAuth()
    {
        string ID = ConfigService.GetTwitchId() ?? _config["TwitchAppID"]!;
        Dictionary<string, string?> query = new() {
            {"client_id", ID },
            {"redirect_uri", $"{Navigation.BaseUri}twitchoauth" },
            {"response_type", "token" },
            {"force_verify", "true" },
            {"scope", "bits:read channel:read:redemptions channel:read:subscriptions chat:edit chat:read" },
        };
        Uri Url = new(QueryHelpers.AddQueryString("https://id.twitch.tv/oauth2/authorize", query));
        Navigation.NavigateTo(Url.AbsoluteUri);
    }

    private void SavePrefix()
    {
        ConfigService.SetTwitchChatPrefix(TwitchPrefix ?? '!');
    }
}
