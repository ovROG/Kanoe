@page "/config/general"
@using Kanoe2.Data.Models
@using Microsoft.AspNetCore.WebUtilities


<div class="d-flex align-center">
    <MudText>Twitch Auth Status:</MudText>
    @if (ConfigService.GetTwitchToken() != null)
    {
        <MudChip Color="Color.Success" Size="Size.Small">Active</MudChip>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="TwitchAuth" Class="ml-auto" StartIcon="@Icons.Material.Filled.Cached">ReAuth</MudButton>
    }
    else
    {
        <MudChip Color="Color.Error" Size="Size.Small">Required</MudChip>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="TwitchAuth" Class="ml-auto" StartIcon="@Icons.Material.Filled.Error">Auth</MudButton>
    }
</div>


@code {
    [Inject]
    public required Services.Config ConfigService { get; set; }
    [Inject]
    public required IConfiguration _config { get; set; }
    [Inject]
    public required NavigationManager Navigation { get; set; }


    private void TwitchAuth()
    {
        string ID = ConfigService.GetTwitchId() ?? _config["TwitchAppID"]!;
        Dictionary<string, string?> query = new() {
            {"client_id", ID },
            {"redirect_uri", $"{Navigation.BaseUri}twitchoauth" },
            {"response_type", "token" },
            {"force_verify", "true" },
            {"scope", "bits:read channel:read:redemptions channel:read:subscriptions" },
        };
        Uri Url = new(QueryHelpers.AddQueryString("https://id.twitch.tv/oauth2/authorize", query));
        Navigation.NavigateTo(Url.AbsoluteUri);
    }
}
