@using TwitchLib.Api.Helix.Models.ChannelPoints;
@using Kanoe.Data.Models;
@using Kanoe.Shared.Components.Events;

@inject NavigationManager NavigationManager;
@inject IDialogService DialogService;

@page "/config/actions/{id}"


<div class="d-flex align-baseline gap-5">
    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Href="/config/actions" />
    <MudText Typo="Typo.h4" class="d-flex align-baseline gap-3">
        <b>Action</b>
        <MudText>(@(Id))</MudText>
    </MudText>
    <MudIconButton class="ml-auto" Color="Color.Error" Disabled="@(ActionObject == null)"
                   Icon="@Icons.Material.Filled.Delete" OnClick="Delete" />
    <MudIconButton Color="Color.Success" Disabled="@(ActionObject == null)" Icon="@Icons.Material.Filled.Save"
                   OnClick="Save" />
</div>

@if (ActionObject != null)
{
    <div class="d-flex pt-3 align-content-center gap-5">
        <MudTextField @bind-Value="@ActionObject.Name" Label="Name" Variant="Variant.Text" />
        <MudNumericField @bind-Value="@RateLimit" Label="RateLimit" Variant="Variant.Text" Min="0"
                         Adornment="Adornment.End" AdornmentText="ms" HideSpinButtons="true" Disabled />
         <MudSwitch @bind-Checked="@ActionObject.AutoDisable" Label="Auto Disable" Color="Color.Primary"
                    class="justify-end" Disabled />
     </div>

    <div class="mt-3 pa-3">

        <div class="d-flex gap-3">
            <MudText Typo="Typo.h5">Triggers</MudText>
            <MudMenu AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterLeft">
                <ActivatorContent>
                    <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Small" />
                </ActivatorContent>
                <ChildContent>
                    @foreach (TriggerType triggerType in (TriggerType[])Enum.GetValues(typeof(TriggerType)))
                    {
                        <MudMenuItem OnClick="() => NewTrigger(triggerType)">@triggerType</MudMenuItem>
                    }
                </ChildContent>
            </MudMenu>
        </div>

        @if (ActionObject.Triggers.Count > 0)
        {
            <MudTable Items="@ActionObject.Triggers" Hover="true" class="mt-3" Outlined="true">
                <RowTemplate>
                    <MudTd>
                        <div class="d-flex align-center gap-5">
                            @context.Type
                            @if (context is TwitchPoints tp)
                            {
                                <MudSelect T="string" @bind-Value="@tp.Id" Label="Reward" AnchorOrigin="Origin.BottomCenter"
                                           Variant="Variant.Outlined">
                                    @foreach (CustomReward reward in TwitchRewards)
                                    {
                                        <MudSelectItem Value="@(reward.Id)">
                                            @reward.Title
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            <MudIconButton class="ml-auto" Color="Color.Error" Icon="@Icons.Material.Filled.Delete"
                                           OnClick="() => DeleteTrigger(context)" />
                        </div>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </div>

    <div class="mt-3 pa-3">

        <div class="d-flex gap-3">
            <MudText Typo="Typo.h5">Events</MudText>
            <MudMenu AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterLeft">
                <ActivatorContent>
                    <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Small" />
                </ActivatorContent>
                <ChildContent>
                    @foreach (EventType eventType in (EventType[])Enum.GetValues(typeof(EventType)))
                    {
                        <MudMenuItem OnClick="() => NewEvent(eventType)">@eventType</MudMenuItem>
                    }
                </ChildContent>
            </MudMenu>
        </div>

        @if (ActionObject.Events.Count > 0)
        {
            <MudTable Items="@ActionObject.Events" Hover="true" class="mt-3" Outlined="true">
                <RowTemplate>
                    <MudTd>
                        <MudText Class="pb-3">@context.Type:</MudText>
                        @switch (context)
                        {
                            case TTS tts:
                                <TTSConfig TTS="@tts" onDelete="() => DeleteEvent(context)" />
                                break;
                            case Sound sound:
                                <SoundConfig Sound="@sound" onDelete="() => DeleteEvent(context)" />
                                break;
                            case VTSHotkey vtshotkey:
                                <VTSHotkeyConfig VTSHotkey="@vtshotkey" onDelete="() => DeleteEvent(context)" />
                                break;
                            case VTSExpression vtsexpression:
                                <VTSExpressionConfig VTSExpression="@vtsexpression" onDelete="() => DeleteEvent(context)" />
                                break;
                            case AIMP aimp:
                                <AIMPConfig AIMP="@aimp" onDelete="() => DeleteEvent(context)" />
                                break;
                            default:
                                break;
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }

    </div>
}
else
{
    <MudText>No Action With id: <b>@Id</b></MudText>
}


@code {
    [Inject]
    public required ISnackbar SnackbarService { get; set; }

    [Inject]
    public required Services.Config ConfigService { get; set; }
    [Inject]
    public required Services.Twitch.TwitchApiService TwitchApiService { get; set; }

    [Parameter]
    public string Id { get; set; } = default!;

    public Data.Models.Action? ActionObject { get; set; }
    public CustomReward[] TwitchRewards { get; set; } = Array.Empty<CustomReward>();

    public double RateLimit { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {

        ActionObject = ConfigService.GetAction(new Guid(Id));
        if (ActionObject != null)
        {
            RateLimit = ActionObject.RateLimit.TotalMilliseconds;
        }
        TwitchRewards = await TwitchApiService.GetPointRewards();
        StateHasChanged();
    }

    public void NewTrigger(TriggerType type)
    {
        Trigger newTrigger;
        switch (type)
        {
            case TriggerType.TwitchPoints:
                newTrigger = new TwitchPoints();
                break;
            default:
                throw new ArgumentException("No type found", nameof(type));
        }
        ActionObject!.Triggers.Add(newTrigger);
    }

    public void DeleteTrigger(Trigger trigger)
    {
        ActionObject!.Triggers.Remove(trigger);
    }

    public void NewEvent(EventType type)
    {
        Event newEvent;
        switch (type)
        {
            case EventType.Sound:
                newEvent = new Data.Models.Sound();
                break;
            case EventType.TTS:
                newEvent = new Data.Models.TTS();
                break;
            case EventType.VTSHotkey:
                newEvent = new Data.Models.VTSHotkey();
                break;
            case EventType.VTSExpression:
                newEvent = new Data.Models.VTSExpression();
                break;
            case EventType.AIMP:
                newEvent = new Data.Models.AIMP();
                break;
            default:
                throw new ArgumentException("No type found", nameof(type));
        }
        ActionObject!.Events.Add(newEvent);
    }

    public void DeleteEvent(Event e)
    {
        ActionObject!.Events.Remove(e);
    }

    public void Save()
    {
        ActionObject!.RateLimit = TimeSpan.FromMilliseconds(RateLimit);
        ConfigService.SetAction(ActionObject!);
        SnackbarService.Add("Saved", Severity.Success);
    }

    public async void Delete()
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        "Are you sure?",
        yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            ConfigService.DeleteAction(ActionObject!.Id);
            NavigationManager.NavigateTo("/config/actions");
        };
    }
}